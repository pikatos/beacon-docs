(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),s=t(7),o=(t(0),t(212)),r={title:"Getting Started"},i={unversionedId:"wallet/getting-started",id:"wallet/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"First, you need to install the beacon-sdk package.",source:"@site/docs/wallet/getting-started.mdx",slug:"/wallet/getting-started",permalink:"/wallet/getting-started",editUrl:"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/wallet/getting-started.mdx",version:"current",sidebar:"wallet",next:{title:"Security",permalink:"/wallet/security"}},c=[],l={toc:c};function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"First, you need to install the ",Object(o.b)("inlineCode",{parentName:"p"},"beacon-sdk")," package."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"npm install --save @airgap/beacon-sdk")),Object(o.b)("p",null,"After that you need to import the Beacon SDK in your code and initialize the WalletClient."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"beacon-sdk")," will automatically establish a connection and listen to all Beacon messages."),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The RPC URL that is provided by the DApp can be an insecure http:// connection. The reason for this is because it allows for easy development with a local node, without setting up a local SSL certificate."),Object(o.b)("p",{parentName:"div"},"Especially the wallet should care about this and potentially show a warning to the user if the RPC URL is not a secure https:// URL."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import {\n  WalletClient,\n  BeaconMessageType,\n  PermissionScope,\n  PermissionResponseInput,\n} from "@airgap/beacon-sdk";\n\nconst connectApp = async (): Promise<void> => {\n  // Only ONE WalletClient should be created and reused everywhere.\n  const client = new WalletClient({ name: "My Wallet" });\n  await client.init(); // Establish P2P connection\n\n  client\n    .connect(async (message) => {\n      console.log("beacon message", message);\n\n      let response: BeaconResponseInputMessage;\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n          // Prompt user for permissions. If multiple accounts are available, let user choose one of them\n\n          response = {\n            type: BeaconMessageType.PermissionResponse,\n            network: message.network, // Use the same network that the user requested\n            scopes: message.scopes,\n            id: message.id,\n            publicKey:\n              "3b92229274683b311cf8b040cf91ac0f8e19e410f06eda5537ef077e718e0024",\n          };\n\n          // Optional\n          // If the user aborts an action at any time, you can send back an error:\n          response = {\n            type: BeaconMessageType.Error,\n            id: message.id,\n            errorType: BeaconErrorType.ABORTED_ERROR,\n          };\n\n          break;\n        case BeaconMessageType.SignPayloadRequest:\n          // Sign message.payload and return signature\n\n          response = {\n            type: BeaconMessageType.SignPayloadResponse,\n            id: message.id,\n            signingType: message.signingType,\n            signature: "edsig...",\n          };\n\n          break;\n        case BeaconMessageType.OperationRequest:\n          // Prepare transaction based on the details give in message.operationDetails\n          // message.operationDetails only contains a partial tezos transaction. Not all fields are mandatory\n          // The fields that are not present (eg. counter, fee, gas_limit) have to be set by the wallet\n          // If one of the optional fields is set, then that one should be used and not replaced by the wallet\n\n          response = {\n            type: BeaconMessageType.OperationResponse,\n            id: message.id,\n            transactionHash: "op...",\n          };\n\n          // Optional\n          // If the transaction cannot be prepared, (eg. run_operations fails), an error containing the rpc error can be returned\n          let error = [\n            {\n              kind: "temporary",\n              id: "proto.008-PtEdo2Zk.contract.balance_too_low",\n              contract: "tz1...",\n              balance: "100",\n              amount: "200",\n            },\n          ]; // RPC error\n          response = {\n            type: BeaconMessageType.Error,\n            id: message.id,\n            errorType: BeaconErrorType.TRANSACTION_INVALID_ERROR,\n            errorData: error,\n          };\n\n          break;\n        case BeaconMessageType.BroadcastRequest:\n          response = {\n            type: BeaconMessageType.OperationResponse,\n            id: message.id,\n            transactionHash: "op...",\n          };\n\n          break;\n        default:\n          response = {\n            type: BeaconMessageType.Error,\n            id: (message as any).id, // Typescript assumes message is of type "never", but we should still add this to handle any potential future messages we don\'t support yet.\n            errorType: BeaconErrorType.ABORTED_ERROR,\n          };\n      }\n\n      client.respond(response);\n    })\n    .catch((error) => console.error("connect error", error));\n};\n\nconnectApp().catch((error) => console.error("connect error", error));\n')),Object(o.b)("p",null,"By adding the code above, our app is now ready to receive messages. Now all that is left for us to do is connecting to a DApp."),Object(o.b)("p",null,"To establish a connection over the P2P network, a handshake message has to be given from the dApp to the wallet. How this is done depends on the platform.\nIt can be through QR scanning, Deeplinks or Copy-Pasting the handshake message. Once the handshake is received, the new peer has to be added:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'const isBeaconMessage: (obj: unknown) => obj is P2PPairingRequest = (\n  obj: unknown\n): obj is P2PPairingRequest => {\n  return (\n    typeof (obj as P2PPairingRequest).name === "string" &&\n    typeof (obj as P2PPairingRequest).publicKey === "string" &&\n    typeof (obj as P2PPairingRequest).relayServer === "string"\n  );\n};\n\nconst handshakeMessage = ""; // This was received from the dApp, eg. through QR scanning or deeplink\n\nconst deserialized = await new Serializer().deserialize(handshakeMessage);\n\nif (isBeaconMessage(deserialized)) {\n  // This will add the peer and establish a connection\n  client.addPeer(peerInfo);\n}\n')),Object(o.b)("p",null,"That's it, now the dApp and the Wallet are connected."),Object(o.b)("p",null,"There are some additional features that the ",Object(o.b)("inlineCode",{parentName:"p"},"WalletClient")," provides, such as ",Object(o.b)("inlineCode",{parentName:"p"},"client.getPermissions()")," or ",Object(o.b)("inlineCode",{parentName:"p"},"client.getPeers()")," to listing all the connected peers and permissions that were granted to dApps."),Object(o.b)("p",null,"Using ",Object(o.b)("inlineCode",{parentName:"p"},"client.removePeer(peer)")," the wallet can disconnect from a peer. If this is done, the dApp will receive a message that the wallet has disconnected."))}p.isMDXComponent=!0}}]);